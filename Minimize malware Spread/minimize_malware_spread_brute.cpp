#include <bits/stdc++.h>
using namespace std;

int spread(vector<vector<int>>& g, int i, int idx) {
  int size = 0;
  if (g[i][i] == 1)
    for (auto j = 0; j < g.size(); ++j)
      if (g[i][j] == 1) g[i][j] = idx, size += 1 + spread(g, j, idx);
  return size;
}
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int sizes[301] = {};
    for (auto idx : initial) {
        if (graph[idx][idx] == 1) sizes[idx] = spread(graph, idx, idx + 2);
        else sizes[graph[idx][idx] - 2] = sizes[idx] = 1;
    }
    return max_element(begin(sizes), end(sizes)) - begin(sizes);
}

int main()
{
    int n,init,temp;
    cin>>n;
    vector<vector<int>> graph;
    for(int i=0; i<n; i++){
      vector<int> v1;
      for(int j=0; j<n; j++){
        cin>>temp;
        v1.push_back(temp);
      }
      graph.push_back(v1);
    }
    cin>>init;
    vector<int> initial(init);
    for(int i=0; i< init; i++){
        cin>>initial[i];
    }
	int result = minMalwareSpread(graph, initial);
    cout<<result;
	return 0;
}