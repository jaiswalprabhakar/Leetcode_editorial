#include <bits/stdc++.h>
using namespace std;

vector<int> parents;
int find(int x) {
    if (x != parents[x])
        parents[x] = find(parents[x]);
    return parents[x];
}
void uni(int x, int y) {
    parents[find(x)] = find(y);
}
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    for (int i = 0; i < n; ++i) parents.push_back(i);
    for (int i = 0; i < n; ++i)
        for (int j = i + 1; j < n; ++j)
            if (graph[i][j]) uni(i, j);
    vector<int> area(n, 0), malware(n, 0);
    for (int i = 0; i < n; ++i) area[find(i)]++;
    for (int i : initial) malware[find(i)]++;
    vector<int> res = {1, 0};
    for (int i : initial)
        res = min(res, {(malware[find(i)] == 1 ) * (-area[find(i)]), i});
    return res[1];
}

int main()
{
    int n,init,temp;
    cin>>n;
    vector<vector<int>> graph;
    for(int i=0; i<n; i++){
      vector<int> v1;
      for(int j=0; j<n; j++){
        cin>>temp;
        v1.push_back(temp);
      }
      graph.push_back(v1);
    }
    cin>>init;
    vector<int> initial(init);
    for(int i=0; i< init; i++){
        cin>>initial[i];
    }
	int result = minMalwareSpread(graph, initial);
    cout<<result;
	return 0;
}