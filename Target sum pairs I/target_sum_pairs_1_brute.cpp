#include <bits/stdc++.h>
using namespace std;
  
int findTargetSumWays(vector<int>& nums, int target) {        
    if (nums.size() == 1)    // if we can't split nums in half
        return (nums.front() == target) + (nums.front() == -target);
    
    // count new target values generated by half of nums sequence
    unordered_map<int, int> targets;        
    int half = nums.size() / 2;        
    int t = (1 << half) - 1;        
    while (t >= 0) {
        int ct = target;
        for (unsigned m = 1, k = 0; k < half; ++k, m <<= 1) {
            if (t & m)
                ct += nums[k];
            else
                ct -= nums[k];
        }
        ++targets[ct];
        --t;
    }
    
    // sum occurrences of the target values equal to the generated ones
    // using the other half of nums sequence
    int ans = 0;
    t = (1 << (nums.size() - half)) - 1;
    while (t >= 0) {
        int ct = 0;
        for (unsigned int m = 1, k = half; k < nums.size(); ++k, m <<= 1) {
            if (t & m)
                ct -= nums[k];
            else
                ct += nums[k];
        }
        auto it = targets.find(ct);
        if (it != targets.end())
            ans += it->second;
        --t;
    }
    
    return ans;
}
int main(){
    int n, target, result;
    cin>>n;
    vector<int> nums(n);
    for(int i=0; i<n; i++){
        cin>>nums[i];
    }
    cin>>target;
    result = findTargetSumWays(nums, target);
    cout<<result;
    return 0;
}